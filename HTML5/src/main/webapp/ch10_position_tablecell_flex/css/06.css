@charset "UTF-8";

	body {
		border: solid 1px gray;
		width: 80%;
		margin: 0 auto;
	}
	
	div#container {
		border: solid 1px red;
		width: 80%;
		margin: 0 auto;
	}
	
	div#container > div#parent, 
	div#container > div#other {
		border: solid 2px green;
		margin: 10px;
	}
	
	div#container > div#parent {
		width: 50%;
		background-color: #ffcccc;
	}
	
	div#container div.me {
	    position: static;   /* position을 생략하면 static 이다. */
    	top: 200px; 
		left: 200px; 
		background-color: yellow;
	} 

/*
   엘리먼트에 CSS 속성으로 position을 지정하면 여러가지 방법으로 위치를 지정할 수 있다.

  -	정적위치(static positioning)
	position: static
	
	position: static 은 position 값을 아예 안 준것과 동일하다.
    position: static 으로 했을때에는 위치값을 줘봐야 엘리먼트의 위치는 변하지 않는다.

        자식 엘리먼트의 크기에 따라서 부모 엘리먼트의 크기가 자동으로 변경된다.
    css 로 position 속성의 값을 지정하지 않으면 기본은 position: static 이다.
    left, top, right, bottom 과 같은 offset(top, right, bottom, left)은 무시가 된다.
    
    position: static 인 경우 class가 me인 엘리먼트가 parent 엘리먼트 안에 포함되어 있을 경우, 
    me의 크기를 따로 지정하지 않으면 me의 크기는 parent 크기를 따라간다. 
*/	

	
	
	/*
      >>>> !!! div 에 세로 정렬을 시키려면 !!! <<<<
      div 의 display 를 flex 로 하고, flex item(div 내 내용물) 에서 margin: auto; 로 지정해주면 된다.
    */
    
	div#container > div#div_flex {
		border: solid 0px red;
		position: fixed;
		top: 78%;	/* 브라우저 상에서의 78%와 84% 이다. */
		left: 84%;
		
		width: 80px;
		height: 80px;
		border-radius: 50%;		/* 절반씩 깎아낸다. */
		
		background-color: navy;
		
		display: flex;
	}
	
	div#container > div#div_flex > a {
		margin: auto;
	}
	

	div#container > div#div_flex > a:link,
	div#container > div#div_flex > a:visited,
	div#container > div#div_flex > a:active {
	/* a:link    : 방문 전 링크 상태이다.
       a:visited : 방문 후 링크 상태이다.
       a:hover   : 마우스 오버 했을 때 링크 상태이다.
       a:active  : 클릭 했을 때 링크 상태이다.
    */
    
    	color: white;
	}
	
	div#container > div#div_flex > a {
		text-decoration: none;	/* 링크 밑줄 없애기 */
	}
	
	div#container > div#div_flex:hover {
		background-color: red;
		transition: 1.5s;
	}
	
	
	
	
	
	
	
	
	
	





























